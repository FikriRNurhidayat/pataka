syntax = "proto3";

package feature.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "feature/v1/model.proto";

option go_package = "github.com/fikrirnurhidayat/ffgo/protobuf/feature/v1;featurev1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Feature Flags";
    version: "1.0.0";
    contact: {
      name: "Fikri Rahmat Nurhidayat";
      url: "https://github.com/fikrirnurhidayat";
      email: "fikrirnurhidayat@gmail.com";
    };
  };
};

/* rpc CreateFeature */
message CreateFeatureRequest {
  string name = 2;
  string label = 3;
  bool enabled = 4;
}
message CreateFeatureResponse {
  Feature feature = 1;
}

/* rpc GetFeature */
message GetFeatureRequest {
  string name = 1;
}
message GetFeatureResponse {
  Feature feature = 1;
}

/* rpc ListFeatures */
message ListFeaturesRequest {
  uint32 page_number = 1;
  uint32 page_size = 2;
  string sort = 3;
  string q = 4;
  FeatureStatus status = 5;
}
message ListFeaturesResponse {
  uint32 page_number = 1;
  uint32 page_size = 2;
  uint32 page_count = 3;
  uint32 size = 4;
  repeated Feature features = 5;
}

/* rpc UpdateFeature */
message UpdateFeatureRequest {
  string name = 1;
  string label = 2;
  bool enabled = 3;
}
message UpdateFeatureResponse {
  Feature feature = 1;
}

/* rpc DeleteFeature */
message DeleteFeatureRequest {
  string name = 1;
}
message DeleteFeatureResponse {}

service FeatureService {
  // CreateFeature
  //
  // Add new feature resource in your feature flags system.
  // Can be toggled on and off on [UpdateFeature](/#/UpdateFeature).
  rpc CreateFeature(CreateFeatureRequest) returns (CreateFeatureResponse) {
    option (google.api.http) = {
      post: "/v1/features"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "CreateFeature"
      summary: "Create Feature"
      tags: "Features"
    };
  }

  // GetFeature
  //
  // Retrieve feature resource by it's name. It will return feature object,
  // and enabled or disabled state.
  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {
    option (google.api.http) = {
      get: "/v1/features/{name}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "GetFeature"
      summary: "Get Feature"
      tags: "Features"
    };
  }

  // ListFeatures
  //
  // Retrieve feature collections.
  rpc ListFeatures(ListFeaturesRequest) returns (ListFeaturesResponse) {
    option (google.api.http) = {
      get: "/v1/features"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "ListFeatures"
      summary: "List Features"
      tags: "Features"
    };
  }

  // UpdateFeature
  //
  // Update a feature resource, usually being used to toggle on and off.
  rpc UpdateFeature(UpdateFeatureRequest) returns (UpdateFeatureResponse) {
    option (google.api.http) = {
      put: "/v1/features/{name}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "UpdateFeature"
      summary: "Update Feature"
      tags: "Features"
    };
  }

  // DeleteFeature
  //
  // Delete a feature resource.
  rpc DeleteFeature(DeleteFeatureRequest) returns (DeleteFeatureResponse) {
    option (google.api.http) = {
      delete: "/v1/features/{name}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "DeleteFeature"
      summary: "Delete Feature"
      tags: "Features"
    };
  }
}
