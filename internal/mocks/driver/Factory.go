// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	driver "github.com/fikrirnurhidayat/ffgo/internal/driver"
	grpclog "google.golang.org/grpc/grpclog"

	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory[T interface{}] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *Factory[T]) Execute(_a0 driver.DB, _a1 grpclog.LoggerV2) T {
	ret := _m.Called(_a0, _a1)

	var r0 T
	if rf, ok := ret.Get(0).(func(driver.DB, grpclog.LoggerV2) T); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

type mockConstructorTestingTNewFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFactory[T interface{}](t mockConstructorTestingTNewFactory) *Factory[T] {
	mock := &Factory[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
