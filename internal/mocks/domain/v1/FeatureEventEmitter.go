// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fikrirnurhidayat/ffgo/internal/domain/v1"
	mock "github.com/stretchr/testify/mock"
)

// FeatureEventEmitter is an autogenerated mock type for the FeatureEventEmitter type
type FeatureEventEmitter struct {
	mock.Mock
}

// EmitCreatedEvent provides a mock function with given fields: _a0, _a1
func (_m *FeatureEventEmitter) EmitCreatedEvent(_a0 context.Context, _a1 *domain.FeatureCreatedEvent) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureCreatedEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitDeletedEvent provides a mock function with given fields: _a0, _a1
func (_m *FeatureEventEmitter) EmitDeletedEvent(_a0 context.Context, _a1 *domain.FeatureDeletedEvent) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureDeletedEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitGottenEvent provides a mock function with given fields: _a0, _a1
func (_m *FeatureEventEmitter) EmitGottenEvent(_a0 context.Context, _a1 *domain.FeatureGottenEvent) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureGottenEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitListedEvent provides a mock function with given fields: _a0, _a1
func (_m *FeatureEventEmitter) EmitListedEvent(_a0 context.Context, _a1 *domain.FeatureListedEvent) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureListedEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitUpdatedEvent provides a mock function with given fields: _a0, _a1
func (_m *FeatureEventEmitter) EmitUpdatedEvent(_a0 context.Context, _a1 *domain.FeatureUpdatedEvent) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureUpdatedEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFeatureEventEmitter interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeatureEventEmitter creates a new instance of FeatureEventEmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeatureEventEmitter(t mockConstructorTestingTNewFeatureEventEmitter) *FeatureEventEmitter {
	mock := &FeatureEventEmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
