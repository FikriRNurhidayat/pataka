// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fikrirnurhidayat/ffgo/internal/domain/v1"
	mock "github.com/stretchr/testify/mock"
)

// FeatureRepository is an autogenerated mock type for the FeatureRepository type
type FeatureRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, name
func (_m *FeatureRepository) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBy provides a mock function with given fields: ctx, args
func (_m *FeatureRepository) DeleteBy(ctx context.Context, args *domain.FeatureFilterArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureFilterArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name
func (_m *FeatureRepository) Get(ctx context.Context, name string) (*domain.Feature, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.Feature
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Feature); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBy provides a mock function with given fields: ctx, args
func (_m *FeatureRepository) GetBy(ctx context.Context, args *domain.FeatureGetByArgs) (*domain.Feature, error) {
	ret := _m.Called(ctx, args)

	var r0 *domain.Feature
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureGetByArgs) *domain.Feature); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.FeatureGetByArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, args
func (_m *FeatureRepository) List(ctx context.Context, args *domain.FeatureListArgs) ([]domain.Feature, error) {
	ret := _m.Called(ctx, args)

	var r0 []domain.Feature
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureListArgs) []domain.Feature); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.FeatureListArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, feature
func (_m *FeatureRepository) Save(ctx context.Context, feature *domain.Feature) error {
	ret := _m.Called(ctx, feature)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Feature) error); ok {
		r0 = rf(ctx, feature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Size provides a mock function with given fields: ctx, args
func (_m *FeatureRepository) Size(ctx context.Context, args *domain.FeatureFilterArgs) (uint32, error) {
	ret := _m.Called(ctx, args)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FeatureFilterArgs) uint32); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.FeatureFilterArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFeatureRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeatureRepository creates a new instance of FeatureRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeatureRepository(t mockConstructorTestingTNewFeatureRepository) *FeatureRepository {
	mock := &FeatureRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
